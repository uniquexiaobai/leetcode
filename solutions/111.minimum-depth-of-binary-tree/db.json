{"javascript":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\n \r\n/*\r\nvar minDepth = function(root) {\r\n\tfunction _minDepth(node) {\r\n\t\tif (node === null) return 0;\r\n\t\tif (node.left === null && node.right === null) return 1; \r\n\t\tif (node.left === null) return _minDepth(node.right) + 1;\r\n\t\tif (node.right === null) return _minDepth(node.left) + 1;\r\n\t\treturn Math.min(_minDepth(node.left), _minDepth(node.right)) + 1;\r\n\t}\r\n\r\n\treturn _minDepth(root);\r\n};\r\n*/\r\n\r\nvar minDepth = function(root) {\r\n\tif (root === null) return 0;\r\n\tvar queue = [root];\r\n\tvar result = 0;\r\n\r\n\twhile (queue.length) {\r\n\t\tresult ++;\r\n\t\tfor (var i = 0, len = queue.length; i < len; i ++) {\r\n\t\t\tvar node = queue.shift();\r\n\r\n\t\t\tif (!node.left && !node.right) return result; \r\n\t\t\tif (node.left) queue.push(node.left);\r\n\t\t\tif (node.right) queue.push(node.right);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};"}