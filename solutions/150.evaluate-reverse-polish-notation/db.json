{"javascript":"/**\r\n * @param {string[]} tokens\r\n * @return {number}\r\n */\r\nvar evalRPN = function(tokens) {\r\n\tvar getResult = function (opr, a, b) {\r\n\t\tswitch (opr) {\r\n\t\t\tcase '+': return a + b;\r\n\t\t\tcase '-': return a - b;\r\n\t\t\tcase '*': return a * b;\r\n\t\t\tcase '/': return ~~(a / b);\r\n\t\t\tdefault: return;\r\n\t\t}\r\n\t}\r\n\r\n    var stack = [];\r\n\t\t\r\n\tfor (var i = 0; i < tokens.length; i ++) {\r\n\t\tvar token = +tokens[i];\r\n\r\n\t\tif (token === token) {\r\n\t\t\tstack.push(token);\r\n\t\t} else {\r\n\t\t\tif (stack.length < 2) return;\r\n\t\t\tvar b = stack.pop();\r\n\t\t\tvar a = stack.pop();\r\n\t\t\tvar result = getResult(tokens[i], a, b);\r\n\r\n\t\t\tif (typeof result === 'number') \r\n\t\t\t\tstack.push(result);\r\n\t\t\telse \r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tif (stack.length) \r\n\t\treturn stack.pop();\r\n\telse \r\n\t\treturn;    \r\n};"}