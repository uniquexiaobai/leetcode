{"javascript":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {boolean}\r\n */\r\n \r\n/*\r\nvar isBalanced = function(root) {\r\n\tif (!root) return true;\r\n\tif (Math.abs(getDepth(root.left, 1) - getDepth(root.right, 1)) > 1) return false;\r\n\treturn isBalanced(root.left) && isBalanced(root.right);\r\n};\r\n\r\nfunction getDepth(node, depth = 0) {\r\n\tif (!node) return depth;\r\n\treturn Math.max(getDepth(node.left, depth + 1), getDepth(node.right, depth + 1));\r\n}\r\n*/\r\n\r\nvar isBalanced = function(root) {\r\n\tfunction getDepth(node) {\r\n\t\tif (!node) return 0;\r\n\r\n\t\tvar dl = getDepth(node.left);\r\n\t\tif (dl === -1) return -1;\r\n\r\n\t\tvar dr = getDepth(node.right);\r\n\t\tif (dr === -1) return -1;\r\n\t\t\r\n\t\tif (Math.abs(dl - dr) > 1) return -1;\r\n\t\treturn Math.max(dl, dr) + 1;\r\n\t}\r\n\r\n\tif (!root) return true;\r\n\tif (getDepth(root) === -1) return false;\r\n\treturn true;\r\n};\r\n"}