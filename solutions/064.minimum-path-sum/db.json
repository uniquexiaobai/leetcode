{"javascript":"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\n \r\n // 记忆化搜索\r\nvar minPathSum = function(grid) {\r\n    var result = [];\r\n\r\n\tfunction _minPathSum(grid, i, j) {\r\n\t\tvar ni = grid.length - 1;\r\n\t\tvar nj = grid[ni].length - 1;\r\n\r\n\t\tif (!result[i]) result[i] = [];\r\n\t\tif (result[i][j]) return result[i][j];\r\n\t\tif (i >= ni && j >= nj) return grid[i][j];\r\n\t\tif (i >= ni) {\r\n\t\t\tresult[i][j] = grid[i][j] + _minPathSum(grid, i, j + 1);\r\n\t\t} else if (j >= nj) {\r\n\t\t\tresult[i][j] = grid[i][j] + _minPathSum(grid, i + 1, j);\r\n\t\t} else {\r\n\t\t\tresult[i][j] = grid[i][j] + Math.min(_minPathSum(grid, i + 1, j), _minPathSum(grid, i, j + 1));\r\n\t\t}\r\n\t\treturn result[i][j];\r\n\t}\r\n\r\n\treturn _minPathSum(grid, 0, 0);\r\n};\r\n\r\n/* 动态规划\r\nvar minPathSum = function(grid) {\r\n\tvar result = [[grid[0][0]]];\r\n\tvar ni = grid.length - 1;\r\n\tvar nj = grid[ni].length - 1;\r\n\r\n\tfor (var i = 0; i <= ni; i ++) {\r\n\t\tif (!result[i]) result[i] = [];\r\n\t\tfor (var j = 0; j <= nj; j ++) {\r\n\t\t\tif (i === 0 && j === 0) continue;\r\n\t\t\tif (i === 0) {\r\n\t\t\t\tresult[i][j] = result[i][j - 1] + grid[i][j];\r\n\t\t\t} else if (j === 0) {\r\n\t\t\t\tresult[i][j] = result[i - 1][j] + grid[i][j];\r\n\t\t\t} else {\r\n\t\t\t\tresult[i][j] = grid[i][j] + Math.min(result[i][j - 1], result[i - 1][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result[ni][nj];\r\n};\r\n*/"}