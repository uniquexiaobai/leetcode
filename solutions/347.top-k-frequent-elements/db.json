{"javascript":"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\n \r\n/* O(nlogn)\r\nvar topKFrequent = function(nums, k) {\r\n\tvar result = [];\r\n\tvar map = {};\r\n\r\n\tfor (var i = 0; i < nums.length; i ++) {\r\n\t\tmap[nums[i]] === undefined ? map[nums[i]] = 1 : map[nums[i]] ++;\r\n\t}\r\n\tvar keys = Object.keys(map).sort((a, b) => map[b] - map[a]);\r\n\t\r\n\tfor (i = 0; i < k; i ++) {\r\n\t\tresult.push(+keys[i]);\r\n\t}\r\n\treturn result;\r\n};\r\n*/\r\n\r\n// O(nlogk)\r\nvar topKFrequent = function(nums, k) {\r\n\tvar heap = new MinHeap();\r\n\tvar result = [];\r\n\tvar map = {};\r\n\r\n\tfor (var i = 0; i < nums.length; i ++) {\r\n\t\tmap[nums[i]] === undefined ? map[nums[i]] = 1 : map[nums[i]] ++;\r\n\t}\r\n\r\n\tvar keys = Object.keys(map);\r\n\tfor (i = 0; i < keys.length; i ++) {\r\n\t\tvar key = keys[i];\r\n\r\n\t\tif (heap.size() === k) {\r\n\t\t\tif (map[key] > heap.top()[0]) {\r\n\t\t\t\theap.pop();\r\n\t\t\t\theap.insert([map[key], +key]);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\theap.insert([map[key], +key]);\r\n\t\t}\r\n\t}\r\n\r\n\twhile (!heap.isEmpty()) {\r\n\t\tresult.push(heap.pop()[1]);\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n// 最小堆\r\nfunction MinHeap() {\r\n\tvar data = [];\r\n\tvar len = 0;\r\n\r\n\tthis.insert = function (arr) {\r\n\t\tdata[++ len] = arr;\r\n\t\tshiftUp(len);\r\n\t}\r\n\r\n\tthis.pop = function () {\r\n\t\tif (!this.isEmpty()) {\r\n\t\t\tvar result = data[1];\r\n\r\n\t\t\tswap(data, 1, len);\r\n\t\t\tlen --;\r\n\t\t\tshiftDown(1);\r\n\r\n\t\t\treturn result; \r\n\t\t}\r\n\t}\r\n\r\n\tthis.top = function () {\r\n\t\treturn data[1];\r\n\t}\r\n\r\n\tthis.isEmpty = function () {\r\n\t\treturn !len;\r\n\t}\r\n\r\n\tthis.size = function () {\r\n\t\treturn len;\r\n\t}\r\n\r\n\tfunction shiftUp(n) {\r\n\t\twhile (n > 1 && data[n][0] < data[n >> 1][0]) {\r\n\t\t\tswap(data, n, n >> 1);\r\n\t\t\tn >>= 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction shiftDown(n) {\r\n\t\twhile (n * 2 <= len) {\r\n\t\t\tvar j = n * 2;\r\n\r\n\t\t\tif (j + 1 <= len && data[j + 1][0] < data[j][0])\r\n\t\t\t\tj ++;\r\n\t\t\tif (data[j][0] < data[n][0])\r\n\t\t\t\tswap(data, j, n);\r\n\t\t\tn = j;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction swap(data, i, j) {\r\n\t\tvar temp = data[i];\r\n\r\n\t\tdata[i] = data[j];\r\n\t\tdata[j] = temp;\r\n\t}\r\n}\r\n"}